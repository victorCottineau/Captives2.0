// Algorithmic Neural Network Architecture
// Version 1.0
// (c) Jean-Claude Heudin 2015
function Neuron(){this.cval=null,this.pval=null,this.inputs=null,this.weights=null,this.operator=null,this.addInput=function(n,t){null==this.inputs&&(this.inputs=[],this.weights=[]),this.inputs.push(n),this.weights.push(t)},this.setWeights=function(n){for(var t=0;t<this.weights.length;t++)this.weights[t]=n[t]}}function Link(n,t,i){this.cout=n||null,this.cin=t||null,this.weight=i||0}function Layer(){this.neurons=[];for(var n=0;n<arguments.length;n++)this.neurons.push(arguments[n]);this.addNeuron=function(n){this.neurons.push(n)}}function Matrix(){this.network=[],this.graph=[],this.addLayer=function(n){this.network.push(n)},this.addNNLink=function(n,t,i){this.graph.push(new Link(n,t,i))},this.addLNLink=function(n,t,i){for(var s=0;s<n.neurons.length;s++)this.addNNLink(n.neurons[s],t,i)},this.addNLLink=function(n,t,i){for(var s=0;s<t.neurons.length;s++)this.addNNLink(n,t.neurons[s],i)},this.addLLLink=function(n,t,i){for(var s=0;s<t.neurons.length;s++)for(var h=0;h<n.neurons.length;h++)this.addNNLink(n.neurons[h],t.neurons[s],i)},this.compile=function(){for(var n=0;n<this.graph.length;n++){var t=this.graph[n];t.cin.addInput(t.cout,t.weight)}},this.propagate=function(){for(var n=0;n<this.network.length;n++)for(var t=this.network[n],i=0;i<t.neurons.length;i++){var s=t.neurons[i];s.pval=s.cval,null!=s.operator&&s.operator()}}}